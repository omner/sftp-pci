---
AWSTemplateFormatVersion: '2010-09-09'
Description: Provides the base configuration for a SFTPServer user and its respective
  role and policy. It builds a s3 bucket with versioning, encryption and LC policy.
Metadata:
  Stack:
    Value: 1
  VersionDate:
    Value: 20200325
  Identifier:
    Value: template-users
  Input:
    Description: None
  Output:
    Description: Outputs ID of all deployed resources
Resources:
  SecretRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaSecretsMgrPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - secretsmanager:DescribeSecret
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
                - secretsmanager:UpdateSecretVersionStage
              Resource:
                Fn::Sub:
                  - arn:aws:secretsmanager:${SecretsRegion}:${AWS::AccountId}:secret:SFTP/*
                  - SecretsRegion: !Ref AWS::Region
            - Effect: Allow
              Action:
                - secretsmanager:GetRandomPassword
              Resource: '*'
  SecretRotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SecretRotationLambda.Arn
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com
  SecretRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt: SecretRotationLambdaRole.Arn
      Environment:
        Variables:
          SecretsManagerRegion: !Ref AWS::Region
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import logging
            import os
            import json

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def lambda_handler(event, context):
                arn = event['SecretId']
                token = event['ClientRequestToken']
                step = event['Step']

                # Setup the client
                service_client = boto3.client('secretsmanager', region_name=os.environ['SecretsManagerRegion'])

                # Make sure the version is staged correctly
                metadata = service_client.describe_secret(SecretId=arn)
                if not metadata['RotationEnabled']:
                    logger.error("Secret %s is not enabled for rotation" % arn)
                    raise ValueError("Secret %s is not enabled for rotation" % arn)
                versions = metadata['VersionIdsToStages']
                if token not in versions:
                    logger.error("Secret version %s has no stage for rotation of secret %s." % (token, arn))
                    raise ValueError("Secret version %s has no stage for rotation of secret %s." % (token, arn))
                if "AWSCURRENT" in versions[token]:
                    logger.info("Secret version %s already set as AWSCURRENT for secret %s." % (token, arn))
                    return
                elif "AWSPENDING" not in versions[token]:
                    logger.error("Secret version %s not set as AWSPENDING for rotation of secret %s." % (token, arn))
                    raise ValueError("Secret version %s not set as AWSPENDING for rotation of secret %s." % (token, arn))

                if step == "createSecret":
                    create_secret(service_client, arn, token)

                elif step == "setSecret":
                    set_secret(service_client, arn, token)

                elif step == "testSecret":
                    test_secret(service_client, arn, token)

                elif step == "finishSecret":
                    finish_secret(service_client, arn, token)

                else:
                    raise ValueError("Invalid step parameter")

            def create_secret(service_client, arn, token):
                # Make sure the current secret exists
                secret = service_client.get_secret_value(SecretId=arn, VersionStage="AWSCURRENT")
                plaintext = secret['SecretString']
                secret_dict = json.loads(plaintext)

                # Now try to get the secret version, if that fails, put a new secret
                try:
                    service_client.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
                except service_client.exceptions.ResourceNotFoundException:
                    # Generate a random password
                    passwd = service_client.get_random_password(ExcludeCharacters=';#,!?`[]^/@"\'\\', PasswordLength=30)
                    secret_dict['Password'] = passwd['RandomPassword']

                    # Put the secret
                    service_client.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=json.dumps(secret_dict, default=str), VersionStages=['AWSPENDING'])

            def set_secret(service_client, arn, token):
                # This is where the secret should be set in the service
                return

            def test_secret(service_client, arn, token):
                # This is where the secret should be tested against the service
                return

            def finish_secret(service_client, arn, token):
                # First describe the secret to get the current version
                metadata = service_client.describe_secret(SecretId=arn)
                current_version = None
                for version in metadata["VersionIdsToStages"]:
                    if "AWSCURRENT" in metadata["VersionIdsToStages"][version]:
                        if version == token:
                            # The correct version is already marked as current, return
                            return
                        current_version = version
                        break

                # Finalize by staging the secret version current
                service_client.update_secret_version_stage(SecretId=arn, VersionStage="AWSCURRENT", MoveToVersionId=token, RemoveFromVersionId=current_version)
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      RotationLambdaARN: !GetAtt SecretRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 1
      SecretId: !Ref TrUserSecret

  EncryptedS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName: !Sub 'sftp-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: GlacierRule
          Status: Enabled
          ExpirationInDays: '400'
          Transitions:
            - TransitionInDays: '90'
              StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  TrUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - transfer.amazonaws.com
          Action:
          - sts:AssumeRole
  TrUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetBucketLocation
          Resource: !GetAtt EncryptedS3Bucket.Arn
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObjectVersion
          - s3:DeleteObject
          - s3:GetObjectVersion
          Resource: !Sub "${EncryptedS3Bucket.Arn}/*"
      Roles:
      - !Ref TrUserRole
  TrUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: SFTP/usecret
      Description: "This secret represent an user for SFTPServer. Keep SFTP/User format"
      GenerateSecretString:
        GenerateStringKey: "Password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\;#`,!?[]^'
        SecretStringTemplate:
          !Sub
          - '{"Role": "${TransferUserRole}","HomeDirectoryDetails": "[{\"Entry\": \"/\", \"Target\": \"/${TransferBucketName}/${!Transfer:UserName}\"}]","PublicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXNru8HA8cxsgJV00YYpCK7H56gCkCWHqKwQp8O5Euqzgelvr3izYtUprW8hHre4Rup5c++4duetqxqHMuNvkOSrgocrSeDStPaRJxFPxtx/qsJ/IWYd9l6p6RnMMXvqDf4pCZ+N1WHDBv2ke59/oMDUeEws2pPgPv6lLfwnmtgkm9/AMROJw6js9ioUatFaTkZcCo2tf59jP3x3LzBnsIFZ3R5ex7Yb8X20LQpQsGzZqqE2NrOdtECfC/xZzt3uUs+O8AHelAC/gSNBe5YZIiRhwY53UH6s0Zc+s+Er6hVfPQ5xOLhYyFNMXLDarsE+ellNGKiLxJ+7s7kQ9rm+L5"}'
          - TransferUserRole: !GetAtt TrUserRole.Arn
            TransferBucketName: !Ref EncryptedS3Bucket
Outputs:
  UserRole:
    Value: !GetAtt TrUserRole.Arn
  BucketName:
    Value: !Ref EncryptedS3Bucket
  SecretName:
    Value: !Ref TrUserSecret
...
