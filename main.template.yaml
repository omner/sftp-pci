---
AWSTemplateFormatVersion: '2010-09-09'
Description: Provides nesting for required stacks to deploy a baseline architecure to support PCI compliance.
Metadata:
  Stack:
    Value: 0
  VersionDate:
    Value: 20200327
  Identifier:
    Value: main
  Input:
    Description: Input of all required parameters in nested stacks
  Output:
    Description: N/A
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'VPC Configuration'
        Parameters:
          - VPCTenancy
          - AvailabilityZoneA
          - AvailabilityZoneB
    ParameterLabels:
      AvailabilityZoneA:
        default: First Availability Zone
      AvailabilityZoneB:
        default: Second Availability zone
      VPCTenancy:
        default: Instance tenancy
Parameters:
  AvailabilityZoneA:
    Description: The name of Availability Zone 1.
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZoneB:
    Description: The name of Availability Zone 2. This must be different from the name of the first Availability Zone.
    Type: AWS::EC2::AvailabilityZone::Name
  VPCTenancy:
    Description: The tenancy attribute for the instances launched into the VPC. If unsure, leave as default.
    Type: String
    Default: default
    AllowedValues:
      - default
  MaxPasswordAge:
    Type: 'Number'
    Description: 'Maximum age for passwords, in number of days.'
    Default: 90
    ConstraintDescription: '(90-365 days)'
    MinValue: 1
    MaxValue: 90
  MinPasswordLength:
    Type: 'Number'
    Description: 'Minimum password length.'
    Default: 7
    ConstraintDescription: '(8-128 characters)'
    MinValue: 7
    MaxValue: 128
  PasswordHistory:
    Type: 'Number'
    Description: 'Number of previous passwords to remember.'
    Default: 4
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 4
    MaxValue: 24
  RequireLowercaseChars:
    Type: 'String'
    Description: 'Password requirement of at least one lowercase character.'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  RequireNumbers:
    Type: 'String'
    Description: 'Password requirement of at least one number.'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  RequireSymbols:
    Type: 'String'
    Description: 'Password requirement of at least one nonalphanumeric character.'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  RequireUppercaseChars:
    Type: 'String'
    Description: 'Password requirement of at least one uppercase character.'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
Mappings:
  CustomVariables:
    vResourceEnvironmentTagKey:
      Value: Environment
    vResourceEnvironmentTagValue:
      Value: PCI
Resources:
  IAMPasswordPolicy:
    Type: 'Custom::IAMPolicyResource'
    Properties:
      ServiceToken: !GetAtt IAMPasswordPolicyResource.Arn
      Region: !Ref "AWS::Region"
  IAMPasswordPolicyResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IAMPasswordPolicyResourceExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse

          iam = boto3.client("iam")

          # Lambda entry point
          def lambda_handler(event, context):

            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

          def update_policy():
            try:

              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=True,
                  HardExpiry=False,
                  MaxPasswordAge=${MaxPasswordAge},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercaseChars},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercaseChars},
                  PasswordReusePrevention=${PasswordHistory})

              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))

          def delete_policy():
            try:

              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))
  IAMPasswordPolicyResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: IAMPasswordCreatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetAccountPasswordPolicy
                  - iam:UpdateAccountPasswordPolicy
                  - iam:DeleteAccountPasswordPolicy
                Resource: "*"

  ProductionVpcTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://sftp-pci.s3.amazonaws.com/vpc-production.template.yaml
      TimeoutInMinutes: 20
      Parameters:
        pRegionAZ1Name: !Ref AvailabilityZoneA
        pRegionAZ2Name: !Ref AvailabilityZoneB
        pProductionVPCName: Production VPC
        pDMZSubnetACIDR: 10.100.10.0/24
        pDMZSubnetBCIDR: 10.100.20.0/24
        pAppPrivateSubnetACIDR: 10.100.96.0/21
        pAppPrivateSubnetBCIDR: 10.100.119.0/21
        pVPCTenancy: !Ref VPCTenancy
  TransferTemplate:
    Type: AWS::CloudFormation::Stack
    DependsOn: ProductionVpcTemplate
    Properties:
      TemplateURL: https://sftp-pci.s3.amazonaws.com/transfer.template.yaml
      TimeoutInMinutes: 20
      Parameters:
        VPCProduction: !GetAtt ProductionVpcTemplate.Outputs.rVPCProduction
        DMZSubnetA: !GetAtt ProductionVpcTemplate.Outputs.rDMZSubnetA
        DMZSubnetB: !GetAtt ProductionVpcTemplate.Outputs.rDMZSubnetB
  UsersTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://sftp-pci.s3.amazonaws.com/users.template.yaml
      TimeoutInMinutes: 20
  SecurityTemplate:
    Type: AWS::CloudFormation::Stack
    DependsOn: ProductionVpcTemplate
    Properties:
      TemplateURL: https://sftp-pci.s3.amazonaws.com/security.template.yaml
      TimeoutInMinutes: 20
      Parameters:
        VPCProduction: !GetAtt ProductionVpcTemplate.Outputs.rVPCProduction
Outputs:
  TemplateType:
    Value: Standard SFTPServer Architecture
  TemplateVersion:
    Value: 1.0
...
